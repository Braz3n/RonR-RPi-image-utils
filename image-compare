#!/bin/bash

trap '{ stty sane; echo ""; errexit "Aborted"; }' SIGINT SIGTERM

MNTPATH="/tmp/img-compare-mnt"

mkloop1()
{
  local INFO1=""
  local SIZE1=0
  local START1=0

  INFO1="$(fdisk -lu "${IMGFILE}")"
  START1=$(grep W95 <<< "${INFO1}" | awk '{print $2}')
  SIZE1=$(grep W95 <<< "${INFO1}" | awk '{print $4}')
  LOOP1="$(losetup -f --show -o $((${START1} * 512)) --sizelimit $((${SIZE1} * 512)) "${IMGFILE}")"
  if [ $? -ne 0 ]; then
    errexit "Unable to create BOOT loop device"
  fi
}

rmloop1()
{
  if [ "${LOOP1}" != "" ]; then
    losetup -d "${LOOP1}"
    LOOP1="" 
 fi
}

mkloop2()
{
  local INFO2=""
  local SIZE2=0
  local START2=0

  INFO2="$(fdisk -lu "${IMGFILE}")"
  START2=$(grep Linux <<< "${INFO2}" | awk '{print $2}')
  SIZE2=$(grep Linux <<< "${INFO2}" | awk '{print $4}')
  LOOP2="$(losetup -f --show -o $((${START2} * 512)) --sizelimit $((${SIZE2} * 512)) "${IMGFILE}")"
  if [ $? -ne 0 ]; then
    errexit "Unable to create ROOT loop device"
  fi
}

rmloop2()
{
  if [ "${LOOP2}" != "" ]; then
    losetup -d "${LOOP2}"
    LOOP2="" 
  fi
}

mntimg()
{
  if [ ! -d "${MNTPATH}/" ]; then
    mkdir "${MNTPATH}/"
    if [ $? -ne 0 ]; then
      errexit "Unable to make ROOT partition mount point"
    fi
  fi
  mkloop2
  mount "${LOOP2}" "${MNTPATH}/"
  if [ $? -ne 0 ]; then
    errexit "Unable to mount image ROOT partition"
  fi
  if [ ! -d "${MNTPATH}/boot/" ]; then
    mkdir -p "${MNTPATH}/boot/"
    if [ $? -ne 0 ]; then
      errexit "Unable to make BOOT partition mount point"
    fi
  fi
  mkloop1
  mount "${LOOP1}" "${MNTPATH}/boot/"
  if [ $? -ne 0 ]; then
    errexit "Unable to mount image BOOT partition"
  fi
}

umntimg()
{
  umount "${MNTPATH}/boot/"
  if [ $? -ne 0 ]; then
    errexit "Unable to unmount image BOOT partition"
  fi
  rmloop1
  umount "${MNTPATH}/"
  if [ $? -ne 0 ]; then
    errexit "Unable to unmount image ROOT partition"
  fi
  rmloop2
  rm -r "${MNTPATH}/"
}

errexit()
{
  echo ""
  echo "$1"
  echo ""
  umount "${MNTPATH}/boot/" &> /dev/null
  umount "${MNTPATH}/" &> /dev/null
  rm -r "${MNTPATH}/" &> /dev/null
  rmloop1
  rmloop2
  exit 1
}

LOOP1=""
LOOP2=""

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

if [ $(id -u) -ne 0 ]; then
  errexit "$0 must be run as root user"
fi

rsync --version &> /dev/null
if [ $? -ne 0 ]; then
  errexit "rsync not installed (run: apt-get install rsync)"
fi

IMGFILE="$1"
FLAG=0
while :
do
  if [[ ${FLAG} -eq 1 || "${IMGFILE}" = "" ]]; then
    while :
    do
      echo ""
      read -r -e -i "${IMGFILE}" -p "Image file to compare? " IMGFILE
      if [ "${IMGFILE}" = "" ]; then
        continue
      elif [ -d "${IMGFILE}" ]; then
        echo ""
        echo "${IMGFILE} is a directory"
        continue
      else
        break
      fi
    done
  fi
  if [ -f "${IMGFILE}" ]; then
    break
  else
    echo ""
    echo "${IMGFILE} not found"
    FLAG=1
  fi
done

mntimg
sync
echo ""
rsync -aDH --dry-run --itemize-changes --partial --numeric-ids --delete --force --exclude "${MNTPATH}" --exclude '/dev' --exclude '/media' --exclude '/mnt' --exclude '/proc' --exclude '/run' \
--exclude '/sys' --exclude '/tmp' --exclude 'lost\+found' --exclude '/etc/udev/rules.d/70-persistent-net.rules' --exclude '/var/lib/asterisk/astdb.sqlite3-journal' / "${MNTPATH}/"
if [ $? -ne 0 ]; then
  errexit "Unable to compare backup"
fi
echo ""
sync
umntimg
