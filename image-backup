#!/bin/bash

trap '{ stty sane; echo ""; errexit "Aborted"; }' SIGINT SIGTERM

BOOTBEG=8192
BOOTEND=532480
ROOTBEG=540672

MNTPATH="/tmp/img-backup-mnt"

ONEMB=$((1024 * 1024))

mkloop1()
{
  local INFO1=""
  local SIZE1=0
  local START1=0

  sync
  INFO1="$(sfdisk -d "${IMGFILE}")"
  START1=$(grep type=c <<< "${INFO1}" | sed -n 's|^.*start=\s\+\([0-9]\+\).*$|\1|p')
  SIZE1=$(grep type=c <<< "${INFO1}" | sed -n 's|^.*size=\s\+\([0-9]\+\).*$|\1|p')
  LOOP1="$(losetup -f --show -o $((${START1} * 512)) --sizelimit $((${SIZE1} * 512)) "${IMGFILE}")"
  if [ $? -ne 0 ]; then
    errexit "Unable to create BOOT loop device"
  fi
}

rmloop1()
{
  if [ "${LOOP1}" != "" ]; then
    sync
    losetup -d "${LOOP1}"
    LOOP1="" 
 fi
}

mkloop2()
{
  local INFO2=""
  local SIZE2=0
  local START2=0

  sync
  INFO2="$(sfdisk -d "${IMGFILE}")"
  START2=$(grep type=83 <<< "${INFO2}" | sed -n 's|^.*start=\s\+\([0-9]\+\).*$|\1|p')
  SIZE2=$(grep type=83 <<< "${INFO2}" | sed -n 's|^.*size=\s\+\([0-9]\+\).*$|\1|p')
  LOOP2="$(losetup -f --show -o $((${START2} * 512)) --sizelimit $((${SIZE2} * 512)) "${IMGFILE}")"
  if [ $? -ne 0 ]; then
    errexit "Unable to create ROOT loop device"
  fi
  START=${START2}
}

rmloop2()
{
  if [ "${LOOP2}" != "" ]; then
    sync
    losetup -d "${LOOP2}"
    LOOP2="" 
  fi
}

mntimg()
{
  MNTED=TRUE
  if [ ! -d "${MNTPATH}/" ]; then
    mkdir "${MNTPATH}/"
    if [ $? -ne 0 ]; then
      errexit "Unable to make ROOT partition mount point"
    fi
  fi
  mkloop2
  mount "${LOOP2}" "${MNTPATH}/"
  if [ $? -ne 0 ]; then
    errexit "Unable to mount image ROOT partition"
  fi
  if [ ! -d "${MNTPATH}/boot/" ]; then
    mkdir -p "${MNTPATH}/boot/"
    if [ $? -ne 0 ]; then
      errexit "Unable to make BOOT partition mount point"
    fi
  fi
  mkloop1
  mount "${LOOP1}" "${MNTPATH}/boot/"
  if [ $? -ne 0 ]; then
    errexit "Unable to mount image BOOT partition"
  fi
}

umntimg()
{
  umount "${MNTPATH}/boot/"
  if [ $? -ne 0 ]; then
    errexit "Unable to unmount image BOOT partition"
  fi
  rmloop1
  umount "${MNTPATH}/"
  if [ $? -ne 0 ]; then
    errexit "Unable to unmount image ROOT partition"
  fi
  rmloop2
  rm -r "${MNTPATH}/"
  MNTED=FALSE
}

errexit()
{
  echo ""
  echo -e "$1"
  echo ""
  if [ "${MNTED}" = "TRUE" ]; then
    umount "${MNTPATH}/boot/" &> /dev/null
    umount "${MNTPATH}/" &> /dev/null
    rm -rf "${MNTPATH}/" &> /dev/null
  fi
  rmloop1
  rmloop2
  exit 1
}

fsckerr()
{
  errexit "Filesystem appears corrupted "$1" resize2fs"
}

usage()
{
  errexit "Usage: $0 [options] [pathto/imagefile for incremental backup]\n\
-h,--help       This usage description\n\
-i,--initial    pathto/filename of image file [,inital size MB [,added space for incremental MB]]\n\
-n,--noexpand   Do not expand filesystem on first run after restore\n\
-o,--options    Additional rsync options (comma separated)"
}

backup()
{
  mntimg
  sync
  rsync -aDH --partial --numeric-ids --delete --force --exclude "${MNTPATH}" --exclude '/dev' --exclude '/lost+found' --exclude '/media' --exclude '/mnt' \
--exclude '/proc' --exclude '/run' --exclude '/sys' --exclude '/tmp' --exclude '/etc/udev/rules.d/70-persistent-net.rules' \
--exclude '/var/lib/asterisk/astdb.sqlite3-journal' "${OPTIONS[@]}" / "${MNTPATH}/"
  if [[ $? -ne 0 && $? -ne 24 ]]; then
    errexit "Unable to create backup"
  fi
  mkdir -p "${MNTPATH}/dev/" "${MNTPATH}/lost+found/" "${MNTPATH}/media/" "${MNTPATH}/mnt/" "${MNTPATH}/proc/" "${MNTPATH}/run/" "${MNTPATH}/sys/" "${MNTPATH}/tmp/"
  if [ $? -ne 0 ]; then
    errexit "Unable to create image directories"
  fi
  chmod a+rwxt "${MNTPATH}/tmp/"
  if [ "${NOEXPAND}" = "FALSE" ]; then
    if [[ $(grep -v '^[[:space:]]*#' "${MNTPATH}/etc/rc.local" | grep -c 'resize-root-fs') -eq 0 && "${ROOT_TYPE}" != "f2fs" ]]; then
      cat <<\EOF > "${MNTPATH}/etc/resize-root-fs"
#!/bin/bash

cp /usr/bin/raspi-config /tmp/raspi-config
ROOT_PART="$(mount | sed -n 's|^/dev/\(.*\) on / .*|\1|p')"
if [ "${ROOT_PART}" != "mmcblk0p2" ]; then
  ROOT_DEV="${ROOT_PART:0:(${#ROOT_PART} - 1)}"
  sed -i -E "s/mmcblk0p?/${ROOT_DEV}/" /tmp/raspi-config
  sed -i 's|    resize2fs /dev/$ROOT_PART &&|    ROOT_DEV=\\$(findmnt / -o source -n) \&\&\n    resize2fs \\$ROOT_DEV \&\&|' /tmp/raspi-config
fi
/tmp/raspi-config --expand-rootfs &> /dev/null
rm /tmp/raspi-config
sed -i '/resize-root-fs/d' /etc/rc.local
rm /etc/resize-root-fs
shutdown --no-wall -r now
exit 0
EOF
      chmod +x "${MNTPATH}/etc/resize-root-fs"
      sed -i 's|^exit 0$|/etc/resize-root-fs\nexit 0|' "${MNTPATH}/etc/rc.local"
    fi
  fi
  sync
  umntimg
}

LOOP1=""
LOOP2=""
MNTED=FALSE

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

if [ $(id -u) -ne 0 ]; then
  errexit "$0 must be run as root user"
fi

PGMNAME="$(basename $0)"
for PID in $(pidof -x -o %PPID "${PGMNAME}"); do
  if [ ${PID} -ne $$ ]; then
    errexit "${PGMNAME} is already running"
  fi
done

rsync --version &> /dev/null
if [ $? -ne 0 ]; then
  errexit "rsync not installed (run: apt-get install rsync)"
fi

if command -v systemctl > /dev/null && systemctl | grep -q '\-\.mount'; then
  SYSTEMD=1
elif [ -f /etc/init.d/cron ] && [ ! -h /etc/init.d/cron ]; then
  SYSTEMD=0
else
  errexit "Unrecognized init system"
fi

if [ ${SYSTEMD} -eq 1 ]; then
  ROOT_PART="$(mount | sed -n 's|^/dev/\(.*\) on / .*|\1|p')"
else
  if [ ! -h /dev/root ]; then
    errexit "/dev/root does not exist or is not a symlink"
  fi
  ROOT_PART="$(readlink /dev/root)"
fi

ROOT_TYPE=$(blkid "/dev/${ROOT_PART}" | sed -n 's|^.*TYPE="\(\S\+\)".*|\1|p')

ROOT_DEV="${ROOT_PART:0:(${#ROOT_PART} - 1)}"
if [ "${ROOT_DEV}" = "mmcblk0p" ]; then
  ROOT_DEV="${ROOT_DEV:0:(${#ROOT_DEV} - 1)}"
fi

PTUUID="$(blkid "/dev/${ROOT_DEV}" | sed -n 's|^.*PTUUID="\(\S\+\)".*|\1|p')"

INFO="$(df | grep "% /$")"
DFKSIZE=$(awk '{print $2}' <<< "${INFO}")
DFKFREE=$(awk '{print $4}' <<< "${INFO}")
INISIZE=$(((${DFKSIZE} - ${DFKFREE}) / 1024))
BLKSIZE=$(blockdev --getbsz "/dev/${ROOT_PART}")

IMGNAME=""
IMGSIZE=""
IMGINCR=""
IMGFILE=""
OPTIONS=()
NOEXPAND=FALSE

while [ $# -gt 0 ]; do
  case "$1" in

    -h|--help)
      usage
      ;;

    -i|--initial)
      OIFS=${IFS}
      IFS=','
      INITIAL=($2)
      IFS=${OIFS}
      IMGNAME=${INITIAL[0]}
      IMGSIZE=${INITIAL[1]}
      IMGINCR=${INITIAL[2]}
      shift 2
      ;;

    -n|--noexpand)
      NOEXPAND=TRUE
      shift
      ;;

    -o|--options)
      OIFS=${IFS}
      IFS=','
      OPTIONS=($2)
      IFS=${OIFS}
      shift 2
      ;;

    -*|--*)
      usage
      ;;

    *)
      IMGFILE="$1"
      shift
      ;;

  esac
done

if [ "${IMGFILE}" = "" ]; then
  if [ "${IMGNAME}" != "" ]; then
    IMGFILE="${IMGNAME}"
    if [[ ! "${IMGFILE}" =~ ^/mnt/.*$ && ! "${IMGFILE}" =~ ^/media/.*$ ]]; then
      errexit "${IMGFILE} does not begin with /mnt/ or /media/"
    fi
    if [ -d "${IMGFILE}" ]; then
      errexit "${IMGFILE} is a directory"
    fi
    if [ "${IMGSIZE}" = "" ]; then
      IMGSIZE=${INISIZE}
    fi
    IRFSSIZE=${IMGSIZE}
    if [ "${IMGINCR}" = "" ]; then
      IMGINCR=0
    fi
    ADDMB=${IMGINCR}
  else
    while :
    do
      echo ""
      read -r -e -i "${IMGFILE}" -p "Image file to create? " IMGFILE
      if [ "${IMGFILE}" = "" ]; then
        continue
      elif [[ ! "${IMGFILE}" =~ ^/mnt/.*$ && ! "${IMGFILE}" =~ ^/media/.*$ ]]; then
        echo ""
        echo "${IMGFILE} does not begin with /mnt/ or /media/"
        continue
      fi
      if [ -d "${IMGFILE}" ]; then
        echo ""
        echo "${IMGFILE} is a directory"
      elif [ -f "${IMGFILE}" ]; then
        echo ""
        echo -n "${IMGFILE} already exists, Ok to delete (y/n)? "
        while read -r -n 1 -s answer; do
          if [[ "${answer}" = [yYnN] ]]; then
            echo "${answer}"
            if [[ "${answer}" = [yY] ]]; then
              break 2
            else
              break 1
            fi
          fi
        done
      else
        break
      fi
    done
    echo ""
    read -r -e -p "Initial image file ROOT filesystem size (MB) [${INISIZE}]? " IRFSSIZE
    if [ "${IRFSSIZE}" = "" ]; then
      IRFSSIZE=${INISIZE}
    fi
    if [ "${ROOT_TYPE}" != "f2fs" ]; then
      echo ""
      read -r -e -p "Added space for incremental updates after shrinking (MB) [0]? " ADDMB
      if [ "${ADDMB}" = "" ]; then
        ADDMB=0
      fi
    fi
    echo ""
    echo -n "Create ${IMGFILE} (y/n)? "
    while read -r -n 1 -s answer; do
      if [[ "${answer}" = [yYnN] ]]; then
        echo "${answer}"
        if [[ "${answer}" = [yY] ]]; then
          break
        else
          errexit "Aborted"
        fi
      fi
    done
  fi
  if [ -f "${IMGFILE}" ]; then
    rm "${IMGFILE}"
    if [ $? -ne 0 ]; then
      errexit "Unable to delete existing image file"
    fi
  fi
  ROOTEND=$((${ROOTBEG} + ((${IRFSSIZE} * ${ONEMB}) / 512) - 1))
  truncate -s $(((${ROOTEND} + 1) * 512)) "${IMGFILE}"
  if [ $? -ne 0 ]; then
    errexit "Unable to create image file"
  fi
  sync
  fdisk "${IMGFILE}" <<EOF > /dev/null
p
n
p
1
${BOOTBEG}
${BOOTEND}
t
c
p
n
p
2
${ROOTBEG}
${ROOTEND}
p
w
EOF
  mkloop1
  mkloop2
  mkfs.vfat "${LOOP1}" > /dev/null
  if [ $? -ne 0 ]; then
    errexit "Unable to create image BOOT filesystem"
  fi
  dosfsck "${LOOP1}" > /dev/null
  if [ $? -ne 0 ]; then
    errexit "Image BOOT filesystem appears corrupted"
  fi
  if [ "${ROOT_TYPE}" = "f2fs" ]; then
    mkfs.f2fs "${LOOP2}" > /dev/null
  else
    mkfs.ext4 -q -b ${BLKSIZE} "${LOOP2}" > /dev/null
  fi
  if [ $? -ne 0 ]; then
    errexit "Unable to create image ROOT filesystem"
  fi
  rmloop2
  rmloop1
  fdisk "${IMGFILE}" <<EOF > /dev/null
p
x
i
0x${PTUUID}
r
p
w
EOF
  echo ""
  echo "Starting full backup (for incremental backups, run: $0 ${IMGFILE})"
  backup
  if [ "${ROOT_TYPE}" != "f2fs" ]; then
    echo ""
    mkloop2
    e2fsck -f -n "${LOOP2}"
    if [ $? -ne 0 ]; then
      fsckerr "before"
    fi
    echo ""
    resize2fs -f -M "${LOOP2}"
    resize2fs -f -M "${LOOP2}"
    resize2fs -f -M "${LOOP2}"
    e2fsck -f -n "${LOOP2}"
    if [ $? -ne 0 ]; then
      fsckerr "after"
    fi
    INFO="$(tune2fs -l "${LOOP2}" 2>/dev/null)"
    rmloop2
    NEWSIZE=$(grep '^Block count:' <<< "${INFO}" | awk '{print $3}')
    BLKSIZE=$(grep '^Block size:' <<< "${INFO}" | awk '{print $3}')
    NEWEND=$((${START} + (${NEWSIZE} * (${BLKSIZE} / 512)) + ((${ADDMB} * ${ONEMB}) / 512) - 1))
    truncate -s $(((${NEWEND} + 1) * 512)) "${IMGFILE}"
    fdisk "${IMGFILE}" <<EOF > /dev/null
p
d
2
n
p
2
${START}
${NEWEND}
p
w
EOF
    if [ ${ADDMB} -ne 0 ]; then
      echo ""
      mkloop2
      e2fsck -f -n "${LOOP2}"
      if [ $? -ne 0 ]; then
        fsckerr "before"
      fi
      echo ""
      resize2fs -f "${LOOP2}"
      e2fsck -f -n "${LOOP2}"
      if [ $? -ne 0 ]; then
        fsckerr "after"
      fi
      rmloop2
    fi
  fi
  backup
  echo ""
else
  if [[ ! "${IMGFILE}" =~ ^/mnt/.*$ && ! "${IMGFILE}" =~ ^/media/.*$ ]]; then
    errexit "${IMGFILE} does not begin with /mnt/ or /media/"
  fi
  if [ -d "${IMGFILE}" ]; then
    errexit "${IMGFILE} is a directory"
  elif [ ! -f "${IMGFILE}" ]; then
    errexit "${IMGFILE} not found"
  fi
  backup
fi
